PawvaScript {
    Program         = Block
    Block           = (Statement)*
    Conditional     = if Exp then ":" Block
                      (else if Exp then ":" Block)* 
                      (else ":" Block)?
                      tail
    Loop            = chase Exp times ":" Block tail                                --defined
                    | chase while Exp ":" Block tail                                --while
                    | chase id through Exp ":" Block tail                           --through
                    | chase VarDec by Exp while Exp ":" Block tail                  --for
                    | chase ":" Block tail                                          --infinite
    Statement       = Declaration
                    | Assignment                    
                    | Print          
                    | Break                    
                    | Continue                      
                    | Loop                    
                    | Conditional                
                    | Return                         
                    | FuncCall ";"                                                  --funccall
    Assignment      = id is Exp ";"
    Print           = (woof | bark | howl) Exp ";"
    Break           = poop ";"
    Continue        = walkies ";"
    Return          = give Exp? ";"
    Declaration     = FuncDec
                    | TypeDec
                    | VarDec ";"                                                    --varDec
    FuncDec         = trick id (chews Parameters)? (fetches Type)? ":" Block tail   
    Parameters      = "[" (Type ":" id)? ("," Type ":" id)* "]"
    VarDec          = Type id (is Exp)?
    TypeDec         = breed id is ":" TypeBody tail
    TypeBody        = (Field | Constructor | Method)*
    Field           = Type id (is Exp)? ";"
    Method          = trick id (chews Parameters)? (fetches Type)? ":" Block tail
    Constructor     = trick id (chews Parameters)? (fetches Type) ";"
    Exp             = Exp logop RelopExp                                            --logop
                    | RelopExp
    RelopExp        = Term relop Term                                               --relop
                    | Term
    Term            = Term (addOp | without | with) Factor                          --addOp
                    | Factor
    Factor          = Factor ("*" | "/" | mod) Negation                             --mulOp
                    | Negation
    Negation        = prefixOp Factorial                                            --preFix
                    | Factorial
    Factorial       = AtExp postfixOp                                               --postFix
                    | AtExp
    AtExp           = OfExp at OfExp                                              --array_index
                    | OfExp
    OfExp           = FuncExp of FuncExp                                          --dictionary_lookup
                    | FuncExp
    FuncExp         = FuncCall 
                    | Primary
    Primary         = "(" Exp ")"                                                   --parens
                    | Primary "'s" id                                               --class_member_access
                    | id
                    | numlit
                    | strlit
                    | booleanlit
                    | nullval
                    | "[" ":" "]"                                                                              --empty_kennel
                    | "[" ListElems? "]"                                            --pack
                    | "[" KeyValPairs "]"                                           --kennel
    ListElems       = ListElem ("," ListElem)*
    ListElem        = peanutButter? Exp
    KeyValPairs     = KeyValPair ("," KeyValPair)*
    KeyValPair      = Exp ":" Exp
    FuncCall        = Primary  "(" (Exp ("," Exp)*)? ")" 
    addOp           = "+" | "-"
    prefixOp        = "-" | not
    postfixOp       = "!"
    Type            = toeBeans 
                    | leash 
                    | goodBoy 
                    | pack "[" Type "]"                                             --list
                    | kennel "[" Type ":" Type "]"                                  --dictionary
                    | id
    nullval         = cat
    booleanlit      = good | bad
    numlit          = digit+ ("." digit+)?
    strlit          = "\"" (interpolation | charseries)* "\""
    charseries      = ( ~"\"" ~"\n" ~"!" (escape | any))+
    interpolation   = "![" id "]"
    escape          = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\!"
    logop           = "&" | "|"
    relop           = "isGreaterThan" | "isAtLeast" | "isAtMost" | "isLessThan" | equalityop
    equalityop      = "equals" | "notEquals"
    is              = "is" ~alnum
    toeBeans        = "toeBeans" ~alnum
    leash           = "leash" ~alnum
    goodBoy         = "goodBoy" ~alnum
    pack            = "pack" ~alnum
    kennel          = "kennel" ~alnum
    breed           = "breed" ~alnum
    chase           = "chase" ~alnum
    tail            = "tail" ~alnum
    else            = "else" ~alnum
    bark            = "bark" ~alnum
    woof            = "woof" ~alnum
    howl            = "howl" ~alnum
    trick           = "trick" ~alnum
    if              = "if" ~alnum
    then            = "then" ~alnum
    good            = "good" ~alnum
    bad             = "bad" ~alnum 
    chews           = "chews" ~alnum
    fetches         = "fetches" ~alnum
    give            = "give" ~alnum
    with            = "with" ~alnum
    without         = "without" ~alnum
    not             = "not" ~alnum
    peanutButter    = "peanutButter" ~alnum
    times           = "times" ~alnum
    while           = "while" ~alnum
    through         = "through" ~alnum
    by              = "by" ~alnum
    mod             = "mod" ~alnum
    poop            = "poop" ~alnum
    walkies         = "walkies" ~alnum
    cat             = "cat" ~alnum
    at              = "at" ~alnum
    of              = "of" ~alnum
    keyword         = equalityop 
                    | relop 
                    | toeBeans | kennel | leash | pack | goodBoy
                    | is 
                    | chase 
                    | tail 
                    | else 
                    | bark 
                    | woof
                    | howl
                    | trick 
                    | if 
                    | then 
                    | good 
                    | bad 
                    | chews 
                    | fetches 
                    | give 
                    | with 
                    | without 
                    | not
                    | peanutButter
                    | times
                    | while
                    | through
                    | by
                    | mod
                    | poop
                    | walkies
                    | cat
                    | at
                    | of
    id              = ~keyword (letter | "_") (letter | digit | "_")*
    space           += comment
    comment         = "!!!" (~"!!!" any)* "!!!"
}